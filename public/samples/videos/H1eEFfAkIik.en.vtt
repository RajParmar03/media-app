WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:02.030 align:start position:0%
 
spelled<00:00:00.719><c> kit</c><00:00:00.960><c> a</c><00:00:01.199><c> framework</c><00:00:01.560><c> for</c><00:00:01.800><c> building</c>

00:00:02.030 --> 00:00:02.040 align:start position:0%
spelled kit a framework for building
 

00:00:02.040 --> 00:00:03.830 align:start position:0%
spelled kit a framework for building
server-rendered<00:00:02.820><c> web</c><00:00:03.000><c> applications</c><00:00:03.480><c> with</c>

00:00:03.830 --> 00:00:03.840 align:start position:0%
server-rendered web applications with
 

00:00:03.840 --> 00:00:05.990 align:start position:0%
server-rendered web applications with
the<00:00:04.080><c> world's</c><00:00:04.380><c> most</c><00:00:04.500><c> loved</c><00:00:04.799><c> UI</c><00:00:05.160><c> Library</c><00:00:05.400><c> it</c><00:00:05.880><c> was</c>

00:00:05.990 --> 00:00:06.000 align:start position:0%
the world's most loved UI Library it was
 

00:00:06.000 --> 00:00:07.369 align:start position:0%
the world's most loved UI Library it was
created<00:00:06.240><c> by</c><00:00:06.420><c> the</c><00:00:06.600><c> creator</c><00:00:06.779><c> of</c><00:00:07.020><c> spelled</c>

00:00:07.369 --> 00:00:07.379 align:start position:0%
created by the creator of spelled
 

00:00:07.379 --> 00:00:09.589 align:start position:0%
created by the creator of spelled
himself<00:00:07.620><c> Rich</c><00:00:07.919><c> Harris</c><00:00:08.160><c> and</c><00:00:08.580><c> hit</c><00:00:08.760><c> version</c><00:00:09.000><c> 1.0</c>

00:00:09.589 --> 00:00:09.599 align:start position:0%
himself Rich Harris and hit version 1.0
 

00:00:09.599 --> 00:00:12.110 align:start position:0%
himself Rich Harris and hit version 1.0
in<00:00:09.780><c> 2022</c><00:00:10.380><c> most</c><00:00:10.920><c> importantly</c><00:00:11.280><c> it</c><00:00:11.580><c> provides</c><00:00:11.940><c> a</c>

00:00:12.110 --> 00:00:12.120 align:start position:0%
in 2022 most importantly it provides a
 

00:00:12.120 --> 00:00:13.970 align:start position:0%
in 2022 most importantly it provides a
universal<00:00:12.480><c> way</c><00:00:12.660><c> to</c><00:00:12.960><c> render</c><00:00:13.200><c> svelte</c><00:00:13.799><c> on</c>

00:00:13.970 --> 00:00:13.980 align:start position:0%
universal way to render svelte on
 

00:00:13.980 --> 00:00:15.890 align:start position:0%
universal way to render svelte on
node.js<00:00:14.519><c> and</c><00:00:14.940><c> other</c><00:00:15.120><c> JavaScript</c><00:00:15.660><c> Edge</c>

00:00:15.890 --> 00:00:15.900 align:start position:0%
node.js and other JavaScript Edge
 

00:00:15.900 --> 00:00:18.050 align:start position:0%
node.js and other JavaScript Edge
runtimes<00:00:16.560><c> this</c><00:00:16.800><c> allows</c><00:00:17.160><c> the</c><00:00:17.279><c> server</c><00:00:17.520><c> to</c><00:00:17.760><c> fetch</c>

00:00:18.050 --> 00:00:18.060 align:start position:0%
runtimes this allows the server to fetch
 

00:00:18.060 --> 00:00:19.910 align:start position:0%
runtimes this allows the server to fetch
data<00:00:18.359><c> up</c><00:00:18.480><c> front</c><00:00:18.660><c> so</c><00:00:18.960><c> the</c><00:00:19.080><c> browser</c><00:00:19.440><c> can</c><00:00:19.619><c> receive</c>

00:00:19.910 --> 00:00:19.920 align:start position:0%
data up front so the browser can receive
 

00:00:19.920 --> 00:00:21.830 align:start position:0%
data up front so the browser can receive
fully<00:00:20.220><c> rendered</c><00:00:20.580><c> HTML</c><00:00:21.240><c> which</c><00:00:21.539><c> can</c><00:00:21.720><c> be</c>

00:00:21.830 --> 00:00:21.840 align:start position:0%
fully rendered HTML which can be
 

00:00:21.840 --> 00:00:23.929 align:start position:0%
fully rendered HTML which can be
critical<00:00:22.080><c> for</c><00:00:22.380><c> performance</c><00:00:22.859><c> and</c><00:00:23.100><c> SEO</c><00:00:23.580><c> then</c>

00:00:23.929 --> 00:00:23.939 align:start position:0%
critical for performance and SEO then
 

00:00:23.939 --> 00:00:25.670 align:start position:0%
critical for performance and SEO then
JavaScript<00:00:24.420><c> takes</c><00:00:24.720><c> over</c><00:00:24.900><c> to</c><00:00:25.199><c> render</c><00:00:25.439><c> all</c>

00:00:25.670 --> 00:00:25.680 align:start position:0%
JavaScript takes over to render all
 

00:00:25.680 --> 00:00:27.589 align:start position:0%
JavaScript takes over to render all
future<00:00:25.920><c> Pages</c><00:00:26.279><c> like</c><00:00:26.640><c> a</c><00:00:27.000><c> fast</c><00:00:27.180><c> and</c><00:00:27.359><c> smooth</c>

00:00:27.589 --> 00:00:27.599 align:start position:0%
future Pages like a fast and smooth
 

00:00:27.599 --> 00:00:29.570 align:start position:0%
future Pages like a fast and smooth
single<00:00:28.019><c> page</c><00:00:28.260><c> application</c><00:00:28.740><c> it</c><00:00:29.099><c> provides</c><00:00:29.460><c> a</c>

00:00:29.570 --> 00:00:29.580 align:start position:0%
single page application it provides a
 

00:00:29.580 --> 00:00:31.009 align:start position:0%
single page application it provides a
built-in<00:00:29.880><c> router</c><00:00:30.300><c> where</c><00:00:30.599><c> every</c><00:00:30.840><c> page</c>

00:00:31.009 --> 00:00:31.019 align:start position:0%
built-in router where every page
 

00:00:31.019 --> 00:00:33.229 align:start position:0%
built-in router where every page
component<00:00:31.500><c> represents</c><00:00:32.040><c> the</c><00:00:32.220><c> UI</c><00:00:32.579><c> for</c><00:00:32.820><c> a</c><00:00:33.000><c> unique</c>

00:00:33.229 --> 00:00:33.239 align:start position:0%
component represents the UI for a unique
 

00:00:33.239 --> 00:00:35.090 align:start position:0%
component represents the UI for a unique
URL<00:00:33.660><c> each</c><00:00:33.960><c> component</c><00:00:34.320><c> though</c><00:00:34.500><c> can</c><00:00:34.739><c> have</c><00:00:34.920><c> a</c>

00:00:35.090 --> 00:00:35.100 align:start position:0%
URL each component though can have a
 

00:00:35.100 --> 00:00:37.010 align:start position:0%
URL each component though can have a
corresponding<00:00:35.640><c> Javascript</c><00:00:36.059><c> file</c><00:00:36.360><c> to</c><00:00:36.660><c> handle</c>

00:00:37.010 --> 00:00:37.020 align:start position:0%
corresponding Javascript file to handle
 

00:00:37.020 --> 00:00:39.110 align:start position:0%
corresponding Javascript file to handle
data<00:00:37.320><c> fetching</c><00:00:37.680><c> this</c><00:00:38.040><c> file</c><00:00:38.219><c> exports</c><00:00:38.640><c> a</c><00:00:38.820><c> load</c>

00:00:39.110 --> 00:00:39.120 align:start position:0%
data fetching this file exports a load
 

00:00:39.120 --> 00:00:40.670 align:start position:0%
data fetching this file exports a load
function<00:00:39.360><c> and</c><00:00:39.660><c> the</c><00:00:39.840><c> return</c><00:00:39.899><c> value</c><00:00:40.320><c> is</c><00:00:40.559><c> made</c>

00:00:40.670 --> 00:00:40.680 align:start position:0%
function and the return value is made
 

00:00:40.680 --> 00:00:42.049 align:start position:0%
function and the return value is made
available<00:00:40.860><c> on</c><00:00:41.219><c> the</c><00:00:41.340><c> component</c><00:00:41.760><c> while</c>

00:00:42.049 --> 00:00:42.059 align:start position:0%
available on the component while
 

00:00:42.059 --> 00:00:43.790 align:start position:0%
available on the component while
providing<00:00:42.540><c> automatic</c><00:00:43.079><c> end-to-end</c><00:00:43.620><c> type</c>

00:00:43.790 --> 00:00:43.800 align:start position:0%
providing automatic end-to-end type
 

00:00:43.800 --> 00:00:45.350 align:start position:0%
providing automatic end-to-end type
safety<00:00:44.219><c> in</c><00:00:44.399><c> addition</c><00:00:44.579><c> the</c><00:00:44.879><c> data</c><00:00:45.180><c> is</c><00:00:45.239><c> made</c>

00:00:45.350 --> 00:00:45.360 align:start position:0%
safety in addition the data is made
 

00:00:45.360 --> 00:00:47.330 align:start position:0%
safety in addition the data is made
available<00:00:45.600><c> on</c><00:00:45.960><c> a</c><00:00:46.140><c> svelt</c><00:00:46.500><c> store</c><00:00:46.680><c> which</c><00:00:47.040><c> can</c><00:00:47.219><c> be</c>

00:00:47.330 --> 00:00:47.340 align:start position:0%
available on a svelt store which can be
 

00:00:47.340 --> 00:00:48.770 align:start position:0%
available on a svelt store which can be
accessed<00:00:47.760><c> from</c><00:00:47.879><c> any</c><00:00:48.120><c> component</c><00:00:48.539><c> and</c>

00:00:48.770 --> 00:00:48.780 align:start position:0%
accessed from any component and
 

00:00:48.780 --> 00:00:50.389 align:start position:0%
accessed from any component and
eliminates<00:00:49.140><c> the</c><00:00:49.320><c> need</c><00:00:49.440><c> for</c><00:00:49.800><c> complex</c><00:00:50.160><c> State</c>

00:00:50.389 --> 00:00:50.399 align:start position:0%
eliminates the need for complex State
 

00:00:50.399 --> 00:00:52.490 align:start position:0%
eliminates the need for complex State
Management<00:00:50.640><c> architectures</c><00:00:51.420><c> Pages</c><00:00:51.960><c> can</c><00:00:52.260><c> also</c>

00:00:52.490 --> 00:00:52.500 align:start position:0%
Management architectures Pages can also
 

00:00:52.500 --> 00:00:54.229 align:start position:0%
Management architectures Pages can also
handle<00:00:52.739><c> server-side</c><00:00:53.219><c> actions</c><00:00:53.760><c> like</c><00:00:54.000><c> form</c>

00:00:54.229 --> 00:00:54.239 align:start position:0%
handle server-side actions like form
 

00:00:54.239 --> 00:00:56.209 align:start position:0%
handle server-side actions like form
submissions<00:00:54.840><c> to</c><00:00:55.260><c> update</c><00:00:55.559><c> the</c><00:00:55.739><c> current</c><00:00:55.860><c> page</c>

00:00:56.209 --> 00:00:56.219 align:start position:0%
submissions to update the current page
 

00:00:56.219 --> 00:00:58.430 align:start position:0%
submissions to update the current page
with<00:00:56.520><c> zero</c><00:00:56.940><c> client-side</c><00:00:57.420><c> JavaScript</c><00:00:57.960><c> forms</c>

00:00:58.430 --> 00:00:58.440 align:start position:0%
with zero client-side JavaScript forms
 

00:00:58.440 --> 00:00:59.750 align:start position:0%
with zero client-side JavaScript forms
can<00:00:58.559><c> then</c><00:00:58.680><c> be</c><00:00:58.800><c> progressively</c><00:00:59.340><c> enhanced</c><00:00:59.640><c> to</c>

00:00:59.750 --> 00:00:59.760 align:start position:0%
can then be progressively enhanced to
 

00:00:59.760 --> 00:01:01.490 align:start position:0%
can then be progressively enhanced to
improve<00:01:00.000><c> of</c><00:01:00.360><c> the</c><00:01:00.539><c> front</c><00:01:00.719><c> end</c><00:01:00.840><c> user</c><00:01:01.199><c> experience</c>

00:01:01.490 --> 00:01:01.500 align:start position:0%
improve of the front end user experience
 

00:01:01.500 --> 00:01:03.470 align:start position:0%
improve of the front end user experience
with<00:01:01.860><c> JavaScript</c><00:01:02.340><c> in</c><00:01:02.699><c> addition</c><00:01:02.879><c> to</c><00:01:03.120><c> Pages</c>

00:01:03.470 --> 00:01:03.480 align:start position:0%
with JavaScript in addition to Pages
 

00:01:03.480 --> 00:01:05.870 align:start position:0%
with JavaScript in addition to Pages
layouts<00:01:04.199><c> can</c><00:01:04.320><c> be</c><00:01:04.440><c> used</c><00:01:04.559><c> to</c><00:01:04.799><c> share</c><00:01:05.040><c> UI</c><00:01:05.460><c> across</c>

00:01:05.870 --> 00:01:05.880 align:start position:0%
layouts can be used to share UI across
 

00:01:05.880 --> 00:01:07.670 align:start position:0%
layouts can be used to share UI across
multiple<00:01:06.240><c> child</c><00:01:06.479><c> routes</c><00:01:06.960><c> and</c><00:01:07.260><c> they</c><00:01:07.439><c> can</c><00:01:07.500><c> even</c>

00:01:07.670 --> 00:01:07.680 align:start position:0%
multiple child routes and they can even
 

00:01:07.680 --> 00:01:09.530 align:start position:0%
multiple child routes and they can even
fetch<00:01:08.040><c> their</c><00:01:08.159><c> own</c><00:01:08.280><c> data</c><00:01:08.640><c> and</c><00:01:08.939><c> finally</c><00:01:09.180><c> we</c><00:01:09.420><c> have</c>

00:01:09.530 --> 00:01:09.540 align:start position:0%
fetch their own data and finally we have
 

00:01:09.540 --> 00:01:11.750 align:start position:0%
fetch their own data and finally we have
server<00:01:09.840><c> files</c><00:01:10.260><c> that</c><00:01:10.619><c> export</c><00:01:10.979><c> functions</c><00:01:11.520><c> like</c>

00:01:11.750 --> 00:01:11.760 align:start position:0%
server files that export functions like
 

00:01:11.760 --> 00:01:13.850 align:start position:0%
server files that export functions like
git<00:01:12.180><c> post</c><00:01:12.420><c> patch</c><00:01:13.020><c> and</c><00:01:13.080><c> delete</c><00:01:13.260><c> to</c><00:01:13.680><c> build</c>

00:01:13.850 --> 00:01:13.860 align:start position:0%
git post patch and delete to build
 

00:01:13.860 --> 00:01:16.250 align:start position:0%
git post patch and delete to build
restful<00:01:14.340><c> apis</c><00:01:14.820><c> to</c><00:01:15.299><c> get</c><00:01:15.420><c> started</c><00:01:15.720><c> create</c><00:01:15.960><c> a</c><00:01:16.140><c> new</c>

00:01:16.250 --> 00:01:16.260 align:start position:0%
restful apis to get started create a new
 

00:01:16.260 --> 00:01:18.289 align:start position:0%
restful apis to get started create a new
project<00:01:16.439><c> with</c><00:01:16.799><c> a</c><00:01:16.920><c> CLI</c><00:01:17.340><c> you'll</c><00:01:17.700><c> notice</c><00:01:17.939><c> it</c><00:01:18.060><c> uses</c>

00:01:18.289 --> 00:01:18.299 align:start position:0%
project with a CLI you'll notice it uses
 

00:01:18.299 --> 00:01:19.910 align:start position:0%
project with a CLI you'll notice it uses
Veet<00:01:18.659><c> as</c><00:01:18.840><c> the</c><00:01:18.960><c> build</c><00:01:19.080><c> tool</c><00:01:19.439><c> then</c><00:01:19.619><c> we</c><00:01:19.799><c> can</c>

00:01:19.910 --> 00:01:19.920 align:start position:0%
Veet as the build tool then we can
 

00:01:19.920 --> 00:01:21.469 align:start position:0%
Veet as the build tool then we can
create<00:01:20.040><c> our</c><00:01:20.280><c> first</c><00:01:20.400><c> page</c><00:01:20.700><c> by</c><00:01:20.939><c> going</c><00:01:21.119><c> to</c><00:01:21.299><c> the</c>

00:01:21.469 --> 00:01:21.479 align:start position:0%
create our first page by going to the
 

00:01:21.479 --> 00:01:23.270 align:start position:0%
create our first page by going to the
routes<00:01:21.780><c> directory</c><00:01:22.259><c> right</c><00:01:22.619><c> click</c><00:01:22.979><c> and</c><00:01:23.100><c> the</c>

00:01:23.270 --> 00:01:23.280 align:start position:0%
routes directory right click and the
 

00:01:23.280 --> 00:01:24.830 align:start position:0%
routes directory right click and the
tooling<00:01:23.580><c> will</c><00:01:23.820><c> help</c><00:01:23.939><c> you</c><00:01:24.060><c> easily</c><00:01:24.360><c> create</c><00:01:24.600><c> the</c>

00:01:24.830 --> 00:01:24.840 align:start position:0%
tooling will help you easily create the
 

00:01:24.840 --> 00:01:26.810 align:start position:0%
tooling will help you easily create the
required<00:01:25.259><c> file</c><00:01:25.500><c> I'm</c><00:01:25.740><c> wrapping</c><00:01:26.159><c> this</c><00:01:26.280><c> URL</c><00:01:26.640><c> in</c>

00:01:26.810 --> 00:01:26.820 align:start position:0%
required file I'm wrapping this URL in
 

00:01:26.820 --> 00:01:28.910 align:start position:0%
required file I'm wrapping this URL in
Brackets<00:01:27.240><c> to</c><00:01:27.479><c> make</c><00:01:27.659><c> it</c><00:01:27.840><c> a</c><00:01:28.020><c> dynamic</c><00:01:28.380><c> route</c><00:01:28.560><c> that</c>

00:01:28.910 --> 00:01:28.920 align:start position:0%
Brackets to make it a dynamic route that
 

00:01:28.920 --> 00:01:30.830 align:start position:0%
Brackets to make it a dynamic route that
will<00:01:29.159><c> give</c><00:01:29.280><c> us</c><00:01:29.400><c> a</c><00:01:29.580><c> username</c><00:01:30.000><c> parameter</c><00:01:30.479><c> we</c><00:01:30.720><c> can</c>

00:01:30.830 --> 00:01:30.840 align:start position:0%
will give us a username parameter we can
 

00:01:30.840 --> 00:01:32.690 align:start position:0%
will give us a username parameter we can
access<00:01:31.020><c> throughout</c><00:01:31.560><c> the</c><00:01:31.680><c> application</c><00:01:32.100><c> notice</c>

00:01:32.690 --> 00:01:32.700 align:start position:0%
access throughout the application notice
 

00:01:32.700 --> 00:01:34.370 align:start position:0%
access throughout the application notice
how<00:01:32.820><c> the</c><00:01:33.000><c> component</c><00:01:33.299><c> has</c><00:01:33.479><c> a</c><00:01:33.659><c> prop</c><00:01:33.780><c> of</c><00:01:34.020><c> data</c>

00:01:34.370 --> 00:01:34.380 align:start position:0%
how the component has a prop of data
 

00:01:34.380 --> 00:01:36.170 align:start position:0%
how the component has a prop of data
using<00:01:34.740><c> the</c><00:01:34.860><c> page</c><00:01:35.040><c> data</c><00:01:35.460><c> interface</c><00:01:35.820><c> this</c>

00:01:36.170 --> 00:01:36.180 align:start position:0%
using the page data interface this
 

00:01:36.180 --> 00:01:37.670 align:start position:0%
using the page data interface this
interface<00:01:36.540><c> is</c><00:01:36.780><c> automatically</c><00:01:37.259><c> generated</c>

00:01:37.670 --> 00:01:37.680 align:start position:0%
interface is automatically generated
 

00:01:37.680 --> 00:01:39.469 align:start position:0%
interface is automatically generated
based<00:01:38.280><c> on</c><00:01:38.340><c> how</c><00:01:38.520><c> we</c><00:01:38.640><c> load</c><00:01:38.939><c> data</c><00:01:39.180><c> from</c><00:01:39.299><c> the</c>

00:01:39.469 --> 00:01:39.479 align:start position:0%
based on how we load data from the
 

00:01:39.479 --> 00:01:41.330 align:start position:0%
based on how we load data from the
server<00:01:39.720><c> in</c><00:01:39.840><c> the</c><00:01:40.020><c> application</c><00:01:40.439><c> that</c><00:01:40.920><c> data</c><00:01:41.220><c> can</c>

00:01:41.330 --> 00:01:41.340 align:start position:0%
server in the application that data can
 

00:01:41.340 --> 00:01:43.850 align:start position:0%
server in the application that data can
be<00:01:41.460><c> loaded</c><00:01:41.759><c> from</c><00:01:42.000><c> a</c><00:01:42.180><c> page.ts</c><00:01:43.020><c> file</c><00:01:43.320><c> inside</c><00:01:43.619><c> the</c>

00:01:43.850 --> 00:01:43.860 align:start position:0%
be loaded from a page.ts file inside the
 

00:01:43.860 --> 00:01:45.710 align:start position:0%
be loaded from a page.ts file inside the
load<00:01:44.100><c> function</c><00:01:44.340><c> we</c><00:01:44.640><c> can</c><00:01:44.759><c> access</c><00:01:45.000><c> the</c><00:01:45.299><c> URL</c>

00:01:45.710 --> 00:01:45.720 align:start position:0%
load function we can access the URL
 

00:01:45.720 --> 00:01:47.149 align:start position:0%
load function we can access the URL
parameters<00:01:46.200><c> like</c><00:01:46.560><c> we</c><00:01:46.680><c> might</c><00:01:46.860><c> take</c><00:01:46.979><c> the</c>

00:01:47.149 --> 00:01:47.159 align:start position:0%
parameters like we might take the
 

00:01:47.159 --> 00:01:49.429 align:start position:0%
parameters like we might take the
username<00:01:47.579><c> and</c><00:01:47.939><c> make</c><00:01:48.060><c> a</c><00:01:48.240><c> fetch</c><00:01:48.600><c> call</c><00:01:48.720><c> to</c><00:01:48.900><c> an</c><00:01:49.079><c> API</c>

00:01:49.429 --> 00:01:49.439 align:start position:0%
username and make a fetch call to an API
 

00:01:49.439 --> 00:01:51.230 align:start position:0%
username and make a fetch call to an API
once<00:01:49.920><c> we</c><00:01:49.979><c> have</c><00:01:50.040><c> our</c><00:01:50.220><c> data</c><00:01:50.520><c> we</c><00:01:50.759><c> just</c><00:01:50.880><c> return</c><00:01:51.000><c> it</c>

00:01:51.230 --> 00:01:51.240 align:start position:0%
once we have our data we just return it
 

00:01:51.240 --> 00:01:52.969 align:start position:0%
once we have our data we just return it
from<00:01:51.420><c> this</c><00:01:51.600><c> function</c><00:01:51.899><c> then</c><00:01:52.200><c> we</c><00:01:52.380><c> can</c><00:01:52.500><c> access</c><00:01:52.680><c> it</c>

00:01:52.969 --> 00:01:52.979 align:start position:0%
from this function then we can access it
 

00:01:52.979 --> 00:01:54.830 align:start position:0%
from this function then we can access it
with<00:01:53.159><c> full</c><00:01:53.280><c> intellisense</c><00:01:53.880><c> back</c><00:01:54.240><c> in</c><00:01:54.420><c> the</c><00:01:54.540><c> UI</c>

00:01:54.830 --> 00:01:54.840 align:start position:0%
with full intellisense back in the UI
 

00:01:54.840 --> 00:01:56.510 align:start position:0%
with full intellisense back in the UI
component<00:01:55.259><c> the</c><00:01:55.500><c> initial</c><00:01:55.740><c> page</c><00:01:55.979><c> load</c><00:01:56.280><c> will</c><00:01:56.399><c> be</c>

00:01:56.510 --> 00:01:56.520 align:start position:0%
component the initial page load will be
 

00:01:56.520 --> 00:01:57.889 align:start position:0%
component the initial page load will be
rendered<00:01:56.759><c> on</c><00:01:56.880><c> the</c><00:01:57.000><c> server</c><00:01:57.240><c> and</c><00:01:57.479><c> we</c><00:01:57.659><c> can</c><00:01:57.780><c> use</c>

00:01:57.889 --> 00:01:57.899 align:start position:0%
rendered on the server and we can use
 

00:01:57.899 --> 00:01:59.749 align:start position:0%
rendered on the server and we can use
felt<00:01:58.259><c> head</c><00:01:58.380><c> to</c><00:01:58.680><c> set</c><00:01:58.799><c> a</c><00:01:58.979><c> title</c><00:01:59.220><c> in</c><00:01:59.340><c> meta</c><00:01:59.640><c> tags</c>

00:01:59.749 --> 00:01:59.759 align:start position:0%
felt head to set a title in meta tags
 

00:01:59.759 --> 00:02:01.730 align:start position:0%
felt head to set a title in meta tags
for<00:01:59.939><c> search</c><00:02:00.420><c> Bots</c><00:02:00.659><c> we</c><00:02:01.079><c> might</c><00:02:01.200><c> also</c><00:02:01.439><c> want</c><00:02:01.619><c> to</c>

00:02:01.730 --> 00:02:01.740 align:start position:0%
for search Bots we might also want to
 

00:02:01.740 --> 00:02:04.069 align:start position:0%
for search Bots we might also want to
access<00:02:02.040><c> this</c><00:02:02.460><c> data</c><00:02:02.759><c> on</c><00:02:03.000><c> deeply</c><00:02:03.299><c> nested</c><00:02:03.720><c> shared</c>

00:02:04.069 --> 00:02:04.079 align:start position:0%
access this data on deeply nested shared
 

00:02:04.079 --> 00:02:05.810 align:start position:0%
access this data on deeply nested shared
components<00:02:04.500><c> defined</c><00:02:04.860><c> in</c><00:02:04.979><c> the</c><00:02:05.100><c> lib</c><00:02:05.340><c> directory</c>

00:02:05.810 --> 00:02:05.820 align:start position:0%
components defined in the lib directory
 

00:02:05.820 --> 00:02:07.069 align:start position:0%
components defined in the lib directory
and<00:02:06.000><c> instead</c><00:02:06.299><c> of</c><00:02:06.360><c> using</c><00:02:06.600><c> techniques</c><00:02:06.960><c> like</c>

00:02:07.069 --> 00:02:07.079 align:start position:0%
and instead of using techniques like
 

00:02:07.079 --> 00:02:09.229 align:start position:0%
and instead of using techniques like
prop<00:02:07.320><c> drilling</c><00:02:07.799><c> we</c><00:02:07.979><c> can</c><00:02:08.099><c> easily</c><00:02:08.399><c> access</c><00:02:08.640><c> it</c><00:02:09.000><c> on</c>

00:02:09.229 --> 00:02:09.239 align:start position:0%
prop drilling we can easily access it on
 

00:02:09.239 --> 00:02:10.850 align:start position:0%
prop drilling we can easily access it on
the<00:02:09.360><c> page</c><00:02:09.539><c> data</c><00:02:09.959><c> store</c><00:02:10.080><c> the</c><00:02:10.380><c> code</c><00:02:10.560><c> we</c><00:02:10.679><c> just</c>

00:02:10.850 --> 00:02:10.860 align:start position:0%
the page data store the code we just
 

00:02:10.860 --> 00:02:12.650 align:start position:0%
the page data store the code we just
wrote<00:02:11.039><c> is</c><00:02:11.220><c> universal</c><00:02:11.700><c> meaning</c><00:02:12.000><c> it</c><00:02:12.239><c> can</c><00:02:12.360><c> run</c><00:02:12.480><c> on</c>

00:02:12.650 --> 00:02:12.660 align:start position:0%
wrote is universal meaning it can run on
 

00:02:12.660 --> 00:02:14.210 align:start position:0%
wrote is universal meaning it can run on
both<00:02:12.840><c> the</c><00:02:13.020><c> client</c><00:02:13.260><c> and</c><00:02:13.440><c> the</c><00:02:13.620><c> server</c><00:02:13.860><c> however</c>

00:02:14.210 --> 00:02:14.220 align:start position:0%
both the client and the server however
 

00:02:14.220 --> 00:02:15.770 align:start position:0%
both the client and the server however
you<00:02:14.520><c> can</c><00:02:14.580><c> tell</c><00:02:14.700><c> the</c><00:02:14.879><c> framework</c><00:02:15.180><c> to</c><00:02:15.360><c> only</c><00:02:15.599><c> run</c>

00:02:15.770 --> 00:02:15.780 align:start position:0%
you can tell the framework to only run
 

00:02:15.780 --> 00:02:17.570 align:start position:0%
you can tell the framework to only run
code<00:02:16.020><c> on</c><00:02:16.200><c> the</c><00:02:16.319><c> server</c><00:02:16.620><c> using</c><00:02:17.040><c> the</c><00:02:17.220><c> server</c>

00:02:17.570 --> 00:02:17.580 align:start position:0%
code on the server using the server
 

00:02:17.580 --> 00:02:19.490 align:start position:0%
code on the server using the server
extension<00:02:18.060><c> in</c><00:02:18.360><c> a</c><00:02:18.540><c> server</c><00:02:18.840><c> file</c><00:02:19.080><c> you</c><00:02:19.379><c> can</c>

00:02:19.490 --> 00:02:19.500 align:start position:0%
extension in a server file you can
 

00:02:19.500 --> 00:02:21.229 align:start position:0%
extension in a server file you can
access<00:02:19.680><c> things</c><00:02:20.040><c> like</c><00:02:20.280><c> databases</c><00:02:21.000><c> and</c>

00:02:21.229 --> 00:02:21.239 align:start position:0%
access things like databases and
 

00:02:21.239 --> 00:02:22.790 align:start position:0%
access things like databases and
environment<00:02:21.660><c> variables</c><00:02:22.200><c> that</c><00:02:22.500><c> you</c><00:02:22.680><c> wouldn't</c>

00:02:22.790 --> 00:02:22.800 align:start position:0%
environment variables that you wouldn't
 

00:02:22.800 --> 00:02:24.530 align:start position:0%
environment variables that you wouldn't
want<00:02:22.980><c> to</c><00:02:23.099><c> expose</c><00:02:23.400><c> client-side</c><00:02:24.000><c> and</c><00:02:24.360><c> Define</c>

00:02:24.530 --> 00:02:24.540 align:start position:0%
want to expose client-side and Define
 

00:02:24.540 --> 00:02:26.510 align:start position:0%
want to expose client-side and Define
actions<00:02:25.200><c> which</c><00:02:25.440><c> are</c><00:02:25.560><c> functions</c><00:02:25.980><c> that</c><00:02:26.160><c> run</c><00:02:26.340><c> on</c>

00:02:26.510 --> 00:02:26.520 align:start position:0%
actions which are functions that run on
 

00:02:26.520 --> 00:02:28.309 align:start position:0%
actions which are functions that run on
the<00:02:26.640><c> server</c><00:02:26.940><c> that</c><00:02:27.300><c> can</c><00:02:27.420><c> be</c><00:02:27.540><c> tied</c><00:02:27.720><c> directly</c><00:02:28.140><c> to</c>

00:02:28.309 --> 00:02:28.319 align:start position:0%
the server that can be tied directly to
 

00:02:28.319 --> 00:02:30.050 align:start position:0%
the server that can be tied directly to
form<00:02:28.560><c> submissions</c><00:02:29.099><c> and</c><00:02:29.340><c> the</c><00:02:29.520><c> front</c><00:02:29.580><c> end</c><00:02:29.760><c> code</c>

00:02:30.050 --> 00:02:30.060 align:start position:0%
form submissions and the front end code
 

00:02:30.060 --> 00:02:31.190 align:start position:0%
form submissions and the front end code
you<00:02:30.300><c> can</c><00:02:30.480><c> mix</c><00:02:30.599><c> and</c><00:02:30.780><c> match</c><00:02:30.959><c> different</c>

00:02:31.190 --> 00:02:31.200 align:start position:0%
you can mix and match different
 

00:02:31.200 --> 00:02:34.070 align:start position:0%
you can mix and match different
rendering<00:02:31.680><c> strategies</c><00:02:32.160><c> like</c><00:02:32.520><c> SSR</c><00:02:33.180><c> ISR</c><00:02:33.840><c> and</c>

00:02:34.070 --> 00:02:34.080 align:start position:0%
rendering strategies like SSR ISR and
 

00:02:34.080 --> 00:02:35.869 align:start position:0%
rendering strategies like SSR ISR and
pre-rendering<00:02:34.739><c> then</c><00:02:34.980><c> use</c><00:02:35.160><c> adapters</c><00:02:35.640><c> to</c>

00:02:35.869 --> 00:02:35.879 align:start position:0%
pre-rendering then use adapters to
 

00:02:35.879 --> 00:02:37.910 align:start position:0%
pre-rendering then use adapters to
deploy<00:02:36.239><c> to</c><00:02:36.420><c> any</c><00:02:36.660><c> major</c><00:02:36.900><c> platform</c><00:02:37.379><c> this</c><00:02:37.860><c> has</c>

00:02:37.910 --> 00:02:37.920 align:start position:0%
deploy to any major platform this has
 

00:02:37.920 --> 00:02:40.190 align:start position:0%
deploy to any major platform this has
been<00:02:38.040><c> spill</c><00:02:38.459><c> kit</c><00:02:38.700><c> in</c><00:02:39.000><c> 100</c><00:02:39.180><c> seconds</c><00:02:39.540><c> check</c><00:02:40.080><c> out</c>

00:02:40.190 --> 00:02:40.200 align:start position:0%
been spill kit in 100 seconds check out
 

00:02:40.200 --> 00:02:41.809 align:start position:0%
been spill kit in 100 seconds check out
my<00:02:40.379><c> new</c><00:02:40.500><c> full</c><00:02:40.680><c> spell</c><00:02:40.980><c> kit</c><00:02:41.280><c> course</c><00:02:41.400><c> if</c><00:02:41.640><c> you</c><00:02:41.760><c> want</c>

00:02:41.809 --> 00:02:41.819 align:start position:0%
my new full spell kit course if you want
 

00:02:41.819 --> 00:02:43.369 align:start position:0%
my new full spell kit course if you want
to<00:02:41.940><c> build</c><00:02:42.000><c> a</c><00:02:42.239><c> full</c><00:02:42.360><c> project</c><00:02:42.599><c> with</c><00:02:42.959><c> it</c><00:02:43.080><c> thanks</c>

00:02:43.369 --> 00:02:43.379 align:start position:0%
to build a full project with it thanks
 

00:02:43.379 --> 00:02:45.050 align:start position:0%
to build a full project with it thanks
for<00:02:43.560><c> watching</c><00:02:43.920><c> and</c><00:02:44.220><c> I</c><00:02:44.400><c> will</c><00:02:44.580><c> see</c><00:02:44.700><c> you</c><00:02:44.819><c> in</c><00:02:44.940><c> the</c>

00:02:45.050 --> 00:02:45.060 align:start position:0%
for watching and I will see you in the
 

00:02:45.060 --> 00:02:47.239 align:start position:0%
for watching and I will see you in the
next<00:02:45.120><c> one</c>

